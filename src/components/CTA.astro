---
export interface Props {
  title?: string;
  description?: string;
  primaryButton?: { text: string; href: string };
  secondaryButton?: { text: string; href: string };
  variant?: string;
}

const { 
  title = "¿Listo para empezar?",
  description = "Únete a miles de usuarios que ya están transformando su forma de trabajar.",
  primaryButton = { text: "Comenzar ahora", href: "/signup" },
  secondaryButton,
  variant = 'default'
} = Astro.props;
---

<section class={`cta cta-${variant}`}>
  <div class="container">
    <div class="cta-content">
      <h2 class="cta-title">{title}</h2>
      <p class="cta-description">{description}</p>
      
      <div class="cta-actions">
        {primaryButton && (
          <a href={primaryButton.href} class="btn btn-primary">{primaryButton.text}</a>
        )}
        {secondaryButton && (
          <a href={secondaryButton.href} class="btn btn-secondary">{secondaryButton.text}</a>
        )}
      </div>
    </div>
    
    <div class="cta-visual">
      <div class="floating-elements">
        <div class="element element-1"></div>
        <div class="element element-2"></div>
        <div class="element element-3"></div>
      </div>
    </div>
  </div>
</section>

<style>
  .cta {
    padding: 6rem 0;
    position: relative;
    overflow: hidden;
  }
  
  .cta-default {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
  }
  
  .cta-gradient {
    background: linear-gradient(135deg, #ff6b6b 0%, #ffd93d 100%);
    color: white;
  }
  
  .cta-dark {
    background: #1a202c;
    color: white;
  }
  
  .container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 4rem;
    align-items: center;
    position: relative;
    z-index: 2;
  }
  
  .cta-content {
    text-align: left;
  }
  
  .cta-title {
    font-size: 3rem;
    font-weight: 800;
    margin-bottom: 1.5rem;
    line-height: 1.2;
  }
  
  .cta-description {
    font-size: 1.25rem;
    margin-bottom: 2.5rem;
    opacity: 0.9;
    line-height: 1.6;
  }
  
  .cta-actions {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }
  
  .btn-primary {
    background: rgba(255,255,255,0.2);
    color: white;
    border: 2px solid rgba(255,255,255,0.3);
    backdrop-filter: blur(10px);
  }
  
  .btn-primary:hover {
    background: rgba(255,255,255,0.3);
    transform: translateY(-2px);
  }
  
  .cta-visual {
    position: relative;
    height: 300px;
  }
  
  .floating-elements {
    position: relative;
    width: 100%;
    height: 100%;
  }
  
  .element {
    position: absolute;
    border-radius: 50%;
    background: rgba(255,255,255,0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255,255,255,0.2);
  }
  
  .element-1 {
    width: 120px;
    height: 120px;
    top: 20px;
    right: 50px;
    animation: float 8s ease-in-out infinite;
  }
  
  .element-2 {
    width: 80px;
    height: 80px;
    bottom: 50px;
    left: 30px;
    animation: float 6s ease-in-out infinite reverse;
  }
  
  .element-3 {
    width: 60px;
    height: 60px;
    top: 120px;
    left: 120px;
    animation: float 10s ease-in-out infinite;
    animation-delay: 2s;
  }
  
  @keyframes float {
    0%, 100% {
      transform: translateY(0px) rotate(0deg);
    }
    50% {
      transform: translateY(-30px) rotate(180deg);
    }
  }
  
  /* Patrón de fondo */
  .cta::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: radial-gradient(circle at 2px 2px, rgba(255,255,255,0.1) 1px, transparent 0);
    background-size: 40px 40px;
    z-index: 1;
  }
  
  @media (max-width: 768px) {
    .cta {
      padding: 4rem 0;
    }
    
    .container {
      grid-template-columns: 1fr;
      gap: 2rem;
      text-align: center;
    }
    
    .cta-title {
      font-size: 2.5rem;
    }
    
    .cta-visual {
      height: 200px;
    }
    
    .cta-actions {
      justify-content: center;
    }
  }
</style>